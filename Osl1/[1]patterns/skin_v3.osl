#define X 0
#define Y 1
#define Z 2

#define R 0
#define G 1
#define B 2

#define grid_c_count 3
//end of defines

float DistLine2D(point p, point p0, point p1)
    {
    vector line_dir = p0 - p1;
    return abs( dot(p0 - p, normalize(vector(line_dir[1], -line_dir[0], 0.0))) );
    }
float DistLineSegment2D(point p, point p0, point p1)
    {
    vector dir_p = p - p0;
    vector dir = p1 - p0;
    float t = clamp(dot(dir_p, dir) / dot(dir, dir), 0.0, 1.0);
    return length(dir_p - dir * t);
    }
float sdTriangle( point p, point p0, point p1, point p2 )
    {
    point e0 = p1 - p0;
    point e1 = p2 - p1;
    point e2 = p0 - p2;

    point v0 = p - p0;
    point v1 = p - p1;
    point v2 = p - p2;

    point pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );
    point pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );
    point pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );
    
    float s = e0[0]*e2[1] - e0[1]*e2[0];
    point d = min( min( point( dot( pq0, pq0 ), s*(v0[0]*e0[1]-v0[1]*e0[0]), 0.0 ),
                    point( dot( pq1, pq1 ), s*(v1[0]*e1[1]-v1[1]*e1[0]), 0.0 )),
                    point( dot( pq2, pq2 ), s*(v2[0]*e2[1]-v2[1]*e2[0]), 0.0 ));

    return -sqrt(d[0])*sign(d[1]);
    }
float dTriangle( point p, point p0, point p1, point p2 )
    {
    point e0 = p1 - p0;
    point e1 = p2 - p1;
    point e2 = p0 - p2;

    point v0 = p - p0;
    point v1 = p - p1;
    point v2 = p - p2;

    point pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );
    point pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );
    point pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );
    
    float s = e0[0]*e2[1] - e0[1]*e2[0];
    point d = min( min( point( dot( pq0, pq0 ), s*(v0[0]*e0[1]-v0[1]*e0[0]), 0.0 ),
                    point( dot( pq1, pq1 ), s*(v1[0]*e1[1]-v1[1]*e1[0]), 0.0 )),
                    point( dot( pq2, pq2 ), s*(v2[0]*e2[1]-v2[1]*e2[0]), 0.0 ));

    return sqrt(d[0]);
    }
//end of distance functions

struct Cell
    {
    point dec, fract;
    float p_d_min, p_d_delta;
    float p_w_min, p_w_delta;
    float threshold;

    point cc[grid_c_count]; //circle center (cc[2] = 0.0): initialized as a random point with coord between -0.5 and 0.5
    float cw[grid_c_count]; //circle warps: initialized as a random value between 0 and 0.5, max radius
    int ce[grid_c_count];   //circle exists = 1, 0 otherwise

    int c_b, c_t, c_l, c_r;
    };
//Cell_c:   points will be between (-0.5, -0.5) - (0.5, 0.5), radius[i] <= 1.0;
//          cc[2] is allways 0.0
//p_d_min and p_d_delta -> [0.0, 0.5]
Cell Cell_c(point pos, float p_d_min, float p_d_delta, float p_w_min, float p_w_delta, float threshold) //between 0.0 and 0.5
    {
    Cell cell;
    cell.p_d_min = p_d_min;
    cell.p_d_delta = p_d_delta;
    cell.p_w_min = p_w_min;
    cell.p_w_delta = p_w_delta;
    cell.threshold = threshold;
    cell.dec = point(floor(pos[X]), floor(pos[Y]), 0.0);
    cell.fract = point(mod(pos[X], 1.0) - 0.5, mod(pos[Y], 1.0) - 0.5, 0.0);

    cell.c_t = 0;
    cell.c_b = 0;
    cell.c_l = 0;
    cell.c_r = 0;

    //create circles
    float ai = (2 * M_PI) / 3.0;
    for(int i = 0; i < grid_c_count; i++)
    {
        cell.ce[i] = 0;

        float ifloat = float(i);
        point n = noise("hash", cell.dec, ifloat);

        float nscale = 1120.0;
        float angle = ai * ifloat + (mod(sin((cell.dec[X] * 20.31 + ifloat + cell.dec[Y]) * 4523.242) * 943.4792, 1.0) - 0.5) * M_PI * 0.5;
        float r = p_d_min + n[1] * p_d_delta;
        if(n[2] < threshold)
            cell.ce[i] = 1;
        
        cell.cc[i] = point(cos(angle) * r, sin(angle) * r, 0.0);
        cell.cw[i] = p_w_min + n[2] * p_w_delta;
    }

    return cell;
    }
//

//links start
void Cell_SetAll(Cell cell)
    {
    for(int i = 1; i < grid_c_count; i++)
    {
        if(cell.cc[cell.c_b][Y] > cell.cc[i][Y])
        {
            cell.c_b = i;
        }
        if(cell.cc[cell.c_t][Y] < cell.cc[i][Y])
        {
            cell.c_t = i;
        }
        if(cell.cc[cell.c_r][X] < cell.cc[i][X])
        {
            cell.c_r = i;
        }
        if(cell.cc[cell.c_l][X] > cell.cc[i][X])
        {
            cell.c_l = i;
        }   
    }
    }
void Cell_SetBottom(Cell cell)
    {
    //smallest y
    for(int i = 1; i < grid_c_count; i++)
    {
        if(cell.cc[cell.c_b][Y] > cell.cc[i][Y])
        {
            cell.c_b = i;
        }
    }
    }
void Cell_SetTop(Cell cell)
    {
    //biggest y
    for(int i = 1; i < grid_c_count; i++)
    {
        if(cell.cc[cell.c_t][Y] < cell.cc[i][Y])
        {
            cell.c_t = i;
        }
    }
    }
void Cell_SetRight(Cell cell)
    {
    //greatest x
    for(int i = 1; i < grid_c_count; i++)
    {
        if(cell.cc[cell.c_r][X] < cell.cc[i][X])
        {
            cell.c_r = i;
        }
    }
    }
void Cell_SetLeft(Cell cell)
    {
    //smallest x
    for(int i = 1; i < grid_c_count; i++)
    {
        if(cell.cc[cell.c_l][X] > cell.cc[i][X])
        {
            cell.c_l = i;
        }
    }
    }
//links end

//dist helper functions
//returns normalized distance to a point
float Cell_Warp(Cell cell, point pos, float warp_pow)
    {
    int closest = -1;
    float d = 0.0; //distance to point
    float lw = 0.0;
    for(int i = 0; i < grid_c_count; i++)
    {
        float td = distance(pos, cell.cc[i]);
        if(td < cell.cw[i] && cell.cw[i] > lw) //inside
        {
            lw = cell.cw[i];
            d = td;
            closest = i;
        }
    }
    if(closest == -1)
        return 2.0;
    float t = d / lw;
    t = pow(t, warp_pow);
    pos = pos * t + cell.cc[closest] * (1.0 - t);
    return d;
    }
float Cell_DLinks(Cell cell, point new_fract)
    {
    float d = 2.0;
    Cell_SetAll(cell);

    if(cell.ce[cell.c_t] == 1)
    {
        Cell top = Cell_c(cell.dec + point(0, 1, 0),cell.p_d_min, cell.p_d_delta, cell.p_w_min, cell.p_w_delta, cell.threshold );
        Cell_SetBottom(top);
        if(top.ce[top.c_b] == 1)
            d = min(d, DistLineSegment2D(new_fract, cell.cc[cell.c_t], top.cc[top.c_b] + point(0.0, 1.0, 0.0)));
    }
    
    if(cell.ce[cell.c_b] == 1)
    {
        Cell bottom = Cell_c(cell.dec + point(0, -1, 0), cell.p_d_min, cell.p_d_delta, cell.p_w_min, cell.p_w_delta, cell.threshold);
        Cell_SetTop(bottom);
        if(bottom.ce[bottom.c_t] == 1)
            d = min(d, DistLineSegment2D(new_fract, cell.cc[cell.c_b], bottom.cc[bottom.c_t] + point(0.0, -1.0, 0.0)));
    }
    
    if(cell.ce[cell.c_l] == 1)
    {
        Cell left = Cell_c(cell.dec + point(-1, 0, 0), cell.p_d_min, cell.p_d_delta, cell.p_w_min, cell.p_w_delta, cell.threshold);
        Cell_SetRight(left);
        if(left.ce[left.c_r] == 1)
            d = min(d, DistLineSegment2D(new_fract, cell.cc[cell.c_l], left.cc[left.c_r] + point(-1.0, 0.0, 0.0)));
    }
    
    if(cell.ce[cell.c_r] == 1)
    {
        Cell right = Cell_c(cell.dec + point(1, 0, 0), cell.p_d_min, cell.p_d_delta, cell.p_w_min, cell.p_w_delta, cell.threshold);
        Cell_SetLeft(right);
        if(right.ce[right.c_l] == 1)
            d = min(d, DistLineSegment2D(new_fract, cell.cc[cell.c_r], right.cc[right.c_l] + point(1.0, 0.0, 0.0)));
    }
    

    return d;
    }
//end of dist helper functions
//
float Cell_Dist(Cell cell, float warp_pow)
    {
    //warp space
    float dot_d = Cell_Warp(cell, cell.fract, warp_pow);
    //

    float d = 2.0;
    int se = 0; //sum exists
    for(int i = 0; i < grid_c_count; i++)
        se += cell.ce[i];
    if(se > 2)  //can build triangle
    {
        float sdt = sdTriangle(cell.fract, cell.cc[0], cell.cc[1], cell.cc[2]);
        if(sdt < 0.0)
            return -sdt;
        else
            return min(sdt, Cell_DLinks(cell, cell.fract));
    }
    return min(d, Cell_DLinks(cell, cell.fract));
    }
//
//Cell controller:
float Cell_Controller(point pos, float nmov_scale, float nmov_pow, float block_size, float p_d_min, float p_d_max, float p_treshold, float p_w_r_min, float p_w_r_max, float p_w, float width, float width_g, float shift)
    {
    point mn = noise("simplex", pos * nmov_scale) * nmov_pow;
    pos[X] = pos[X] + mn[X];
    pos[Y]+= mn[Y];
    pos[X] += shift;
    float npd = p_d_min / 200.0;
    float pdd = p_d_max / 200.0 - npd;
    float npw = p_w_r_min / 200.0;
    Cell cell = Cell_c(pos / (block_size / 100.0), npd, pdd, npw, p_w_r_max / 200.0 - npw, p_treshold / 100.0);

    float tf = p_w_r_min / 200.0;
    float d = Cell_Dist(cell, p_w);

    tf = width / 100.0;
    if(d < tf)
    {
        float nd = 1.0 - d / tf;
        return smoothstep(0.0, width_g / 100.0, nd);
    }
    return 0.0;
    }
//
//Debug
float CelularDebug(Cell cell)
    {
    float xabs = abs(cell.fract[X]), yabs = abs(cell.fract[Y]);
    float border = 0.5 / 3.0;
    float border_double = border * 2.0;

    if(max(xabs, yabs) < border && min(abs(xabs - border), abs(yabs - border)) < 0.01)
    {
        return 6.0;
    }

    if(min(xabs, yabs) > border)
    {
        return 5.0;
    }
    else if(max(xabs, yabs) < border) //CENTER CELL
    {
        return 0.0;
    } //just display other cell centers
    else if(cell.fract[Y] > border) //top cell
    {
        return 0.0;
    }
    else if(cell.fract[Y] < -border) //bottom cell
    {
        return 0.0;
    }
    else if(cell.fract[X] < -border) //left cell
    {
        return 0.0;
    }
    else if(cell.fract[X] > border) //right cell
    {
        return 0.0;
    }
    return 0.0;
    }
color CelularDebugCol(Cell cell)
    {
    if(max(abs(cell.fract[X]), abs(cell.fract[Y])) > 0.49)
        return color(1.0, 0.0, 0.0);
    float d = CelularDebug(cell);
    if(d > 5.9)
        return color(0.231, 0.1, 1.0);
    if(d > 4.9)
        return color(0.5, 1.0, 0.0);
    else if(d > 1.9)
        return color(0.0, 0.0, 0.1);
    return color(d);
    }

//END of Cell

//pos z is assumed to be 0
//gradient = [0, 100]
float GradientDots(point pos, float rad_p, float gradient_p, float nscale, float nmag)
    {
    point np = pos + noise("simplex", pos * nscale + 1237.4261) * nmag;
    point fract = point( mod(np[X], 1.0) - 0.5, mod(np[Y], 1.0) - 0.5, 0.0);
    float rad = rad_p / 100.0;
    float len = length(fract) * 2.0 - rad; //len = [0, 1 * sqrt(2)]
    return 1.0 - smoothstep(- gradient_p / 100.0, 0, len);
    }
shader SkinBumpGen(
    output color Output_Color = 0,
    point uv_coords = point(u, v, 0)        [[string label = "Projection"]],
    float global_scale = 10.0               [[string label = "Global Scale"]],

    float nmov_scale = 2.3                  [[string label = "cell noise scale"]],
    float nmov_pow = 0.0                    [[string label = "cell noise magnitude"]],
    float block_size = 1.0                  [[string label = "cell block size"]],
    float p_d_min = 58.5                    [[string label = "cell point dist min as percent"]],
    float p_d_max = 66.7                    [[string label = "cell point dist max as percent"]],
    float p_treshold = 100.0                [[string label = "cell point threshold percentage"]],
    float p_w_r_min = 10.0                  [[string label = "cell warp rad min as percent"]],
    float p_w_r_max = 40.5                  [[string label = "cell warp rad max as percent"]],
    float p_w = 1.2                         [[string label = "cell warp effect"]],
    float width = 5.1                       [[string label = "cell line width"]],
    float width_g = 81.12                   [[string label = "cell line gradient p of width"]],
    float shift = -4.8,

    float dots_scale = 50.0                 [[string label = "dots scale"]],
    float dots_rad_p = 100.0                [[string label = "dots radius percentage"]],
    float dots_grad_p = 50                  [[string label = "dots gradient percentage"]],
    float dots_ns = 0.0                     [[string label = "dots noise scale"]],
    float dots_nm = 0.0                     [[string label = "dots noise magnitude"]],
    float dots_visibility = 100.0           [[string label = "dots visibility 0 - 100"]]
    
    )
{
    //setup
    point pos = uv_coords * global_scale;
    float c = Cell_Controller(point(pos), nmov_scale, nmov_pow, block_size, p_d_min, p_d_max, p_treshold, p_w_r_min, p_w_r_max, p_w, width, width_g, shift);
    float d = GradientDots(pos / (dots_scale  / 100.0), dots_rad_p, dots_grad_p, dots_ns, dots_nm);
    float t = dots_visibility / 100.0;
    d = (1 - t) + t * d;
    c = (1.0 - c) * d;

    Output_Color = color(min(abs(c), 1.0));
}