float Dist2D(point a, point b)
{
    return sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]) );
}
float Dist2D(point a, float x, float y)
{
    return sqrt((a[0] - x) * (a[0] - x) + (a[1] - y) * (a[1] - y) );
}
float Dgrid2D(point p, float sq_sz)
{
    //if dist is less than sq_sz quit
    float tf = sq_sz / 2;
    float xm = floor(p[0] / sq_sz) * sq_sz + tf;
    float ym = floor(p[1] / sq_sz) * sq_sz + tf;

    return Dist2D(p, xm, ym);
}
float DistLine2D(point p, point P1, point P2)
{
    float delta_x = P2[0] - P1[0];
    if(abs(delta_x) < 0.0001)
        return abs(p[0] - P1[0]);
    float delta_y = P2[1] - P1[1];

    float tf = abs( delta_x * (P1[1] - p[1]) - (P1[0] - p[0]) * delta_y );
    tf = tf / sqrt(delta_x * delta_x + delta_y * delta_y);
    return tf;
}

//point distort_space = point(0) [[string label = "[0]: scale, [1]: magnitude, [2]: ntype"]],
//ntype: simplex|cell|hash
void DistortSpace2D(point pos, point data)
{
    int ntype = (int)data[2];
    if(ntype == 0)
    {
        vector n = noise("simplex", pos * data[0]) * data[1];
        pos[0] += n[0];
        pos[1] += n[1];
    }
    else if(ntype == 1)
    {
        vector n = noise("cell", pos * data[0]) * data[1];
        pos[0] += n[0];
        pos[1] += n[1];
    }
    else if(ntype == 2)
    {
        vector n = noise("hash", pos * data[0]) * data[1];
        pos[0] += n[0];
        pos[1] += n[1];
    }
}

//bn = block noise
//rsn = row shift noise
float DgridPixelate2D(point pos, float block_size, float bn_scale, float bn_threshold, int bn_type, float rsn_scale, float rsn_magnitude)
{
    float n;
    float tf = block_size / 2;
    float yval = floor(pos[1] / block_size) * block_size + tf;
    point pos_shifted = point(pos[0] + noise("simplex", yval * rsn_scale) * rsn_magnitude, pos[1], 0.0);

    point block_center = point(floor( pos_shifted[0] / block_size) * block_size + tf, yval , 0.0);

    if(bn_type == 0)
    {
        n = noise("usimplex", block_center * bn_scale);
    }
    else if(bn_type == 1)
    {
        n = noise("cell", block_center * bn_scale);
    }
    else if(bn_type == 2)
    {
        n = noise("hash", block_center * bn_scale);
    }

    if(n > bn_threshold)
    {
        float x = pos_shifted[0] - block_center[0];
        float y = pos_shifted[1] - block_center[1];
        return -sqrt( x * x + y * y );
    }
    return 0;
}

//returns the distance as a negative number if it found any cell with noise below the specified threshold
//esl = extra search layers
float DgridSearch2D(point pos, float block_size, int esl, float threshold, float noise_scale)
{
    float n;
    float bsh = block_size / 2;
    point tp, block_center = point(floor(pos[0] / block_size) * block_size + bsh, floor(pos[1] / block_size) * block_size + bsh, 0.0);
    
    n = noise("usimplex", block_center[0] * noise_scale, block_center[1] * noise_scale);
    //layer 1: 1
    if(n < threshold)
    {
        return -sqrt((pos[0] - block_center[0]) * (pos[0] - block_center[0]) + (pos[1] - block_center[1]) * (pos[1] - block_center[1]));
    }

    //layer 2k + 1: 8 rad = block_size
    //if a min dist is found it can quit after current layer is finished and so is the next one
    float min_dist = 0.0;
    int min_dist_exists = 0;
    int layer_stop = esl * 2 + 2;
    for(int l = 3; l < layer_stop; l += 2)
    {
        int lh = (int)(l / 2);
        float x = -lh - 1, y = lh;
        for(int i = 0; i < l; i++)
        {
            x += 1.0;
            //op with x, y
            tp = point(block_center[0] + block_size * x, block_center[1] + block_size * y, 0.0);
            n = noise("usimplex", tp[0] * noise_scale, tp[1] * noise_scale);
            if(n < threshold)
            {
                float tf = sqrt((pos[0] - tp[0]) * (pos[0] - tp[0]) + (pos[1] - tp[1]) * (pos[1] - tp[1]));
                if(min_dist > tf || min_dist_exists == 0)
                    min_dist = tf;
                min_dist_exists = 1;
            }
            //op with -x, -y
            tp = point(block_center[0] - block_size * x, block_center[1] - block_size * y, 0.0);
            n = noise("usimplex", tp[0] * noise_scale, tp[1] * noise_scale);
            if(n < threshold)
            {
                float tf = sqrt((pos[0] - tp[0]) * (pos[0] - tp[0]) + (pos[1] - tp[1]) * (pos[1] - tp[1]));
                if(min_dist > tf || min_dist_exists == 0)
                    min_dist = tf;
                min_dist_exists = 1;
            }
            
        }
        for(int i = 0; i < l - 2; i++)
        {
            y--;
            //op with x, y
            tp = point(block_center[0] + block_size * x, block_center[1] + block_size * y, 0.0);
            n = noise("usimplex", tp[0] * noise_scale, tp[1] * noise_scale);
            if(n < threshold)
            {
                float tf = sqrt((pos[0] - tp[0]) * (pos[0] - tp[0]) + (pos[1] - tp[1]) * (pos[1] - tp[1]));
                if(min_dist > tf || min_dist_exists == 0)
                    min_dist = tf;
                min_dist_exists = 1;
            }
            //op with -x, -y
            tp = point(block_center[0] - block_size * x, block_center[1] - block_size * y, 0.0);
            n = noise("usimplex", tp[0] * noise_scale, tp[1] * noise_scale);
            if(n < threshold)
            {
                float tf = sqrt((pos[0] - tp[0]) * (pos[0] - tp[0]) + (pos[1] - tp[1]) * (pos[1] - tp[1]));
                if(min_dist > tf || min_dist_exists == 0)
                    min_dist = tf;
                min_dist_exists = 1;
            }
        }
    }

    if(min_dist_exists == 1)
        return -min_dist;
    return 1;
}


/* TODO:
    -lines
    -dot size variation by image
    -in out with gray background
    -in out ratio by image
    -lines pow by image
    -dot density by image
    -distortion by image
*/
shader Test(
    output color Output_Color = 0,
    point uv_coords = point(u, v, 0) [[string label = "Projection"]],
    float scale = 1.0 [[string label = "Global Scale"]],
    point distort_space = point(0) [[string label = "distort: scale|magnitude|ntype"]],

    point block_data = point(0) [[string label = "block data: size|threshold|noise_scale"]],
    int bn_extra_search_layers = 0,
    float dot_size = 1.0,
    float dot_gradient = 5 [[string label = "dot_grad:[1 - infinity)"]],
    float dot_pow = 1 [[string label = "dot_grad_pow[0 - infinity)"]],
    int mode = 0
    )
{
    point pos = uv_coords * scale;
    DistortSpace2D(pos, distort_space);
    float dgrid;
    if(mode == 1)
        dgrid = DgridLinesSearch2D(pos, block_data[0], bn_extra_search_layers, block_data[1], block_data[2]);
    else
        dgrid = DgridSearch2D(pos, block_data[0], bn_extra_search_layers, block_data[1], block_data[2]);

    if(dgrid < 0)
    {
        dgrid = -dgrid;
        if(dgrid < dot_size)
        {
            dgrid = 1.0 - dgrid / dot_size; //map to 0 - 1
            float ainv = 1.0 / dot_gradient;
            if(dgrid > ainv)
            {
                Output_Color = color(1);
                return;
            }
            else if(dgrid < 0)
            {
                Output_Color = color(0);
                return;
            }
            else
            {
                Output_Color = color(pow(sin(dgrid * M_PI * dot_gradient / 2), dot_pow));
                return;
            }
        }
    }
    Output_Color = color(0.0);
}