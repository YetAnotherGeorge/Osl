float Dist2D(point a, point b)
{
    return sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]) );
}
float Dist2D(point a, float x, float y)
{
    return sqrt((a[0] - x) * (a[0] - x) + (a[1] - y) * (a[1] - y) );
}
//p[0] = x, p[1] = y, p[2] = radius
color DebugPass2D(color c, point p, point data)
{
    float dist = Dist2D(p, data[0], data[1]);
    if(dist < data[2])
    {
        float dist_n = dist / data[2];
        float r = c[0] * c[0] * c[0] * dist_n;
        float g = c[1] * c[2] * dist_n; 
        float b = noise(p[0] * dist, p[1] * dist) * dist_n;        
        
        return color(r, g, b);
    }
    return c;
}

color CircleEmpty2D(color c, point p, point center, float rad, float width)
{
    float dist = abs(Dist2D(center, p) - rad);
    if(dist < width)
    {
        dist = 1.0 - dist / width;
        return color(dist, dist, dist);
    }
    return c;
}
shader Test(
    output color Output_Color = 0,
    color translate_noise = color(0,0, 0),
    float translate_noise_pow = 0.0,
    float scale = 1.0,
    point debug_data = 0,

    point center = 0,
    float radius = 0,
    float thicc = 0
    )
{
    point pos = transform("object", "world", P) * scale;

    Output_Color = CircleEmpty2D(color(0), pos, center, radius, thicc);
}