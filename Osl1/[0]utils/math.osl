#define X 0
#define Y 1
#define Z 2

#define R 0
#define G 1
#define B 2

#define point2(a, b) point(a, b, 0.0)
#define fract(val) mod(val, 1.0)

//math
void NoiseTranslate2D(point p, float radius, float scale)
    {
    color a = noise("cell", p * scale);
    float n0 = a[0] * radius;
    float n1 = a[1] * radius;
    float n2 = a[2] * radius;

    p[0] += n0;
    p[1] += n1;
    }
point CellNoiseTranslate2D(point p, float radius, float scale)
    {
    color a = noise("cell", p * scale);
    float n0 = a[0] * radius;
    float n1 = a[1] * radius;
    float n2 = a[2] * radius;

    return point(p[0] + n0, p[1] + n1, 0);
    }
float Dist2D(point a, point b)
    {
    return sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]) );
    }
float Dist2D(point a, float x, float y)
    {
    return sqrt((a[0] - x) * (a[0] - x) + (a[1] - y) * (a[1] - y) );
    }
float DistLine2D(point p, point P1, point P2)
    {
    float delta_x = P2[0] - P1[0];
    if(abs(delta_x) < 0.0001)
        return abs(p[0] - P1[0]);
    float delta_y = P2[1] - P1[1];

    float tf = abs( delta_x * (P1[1] - p[1]) - (P1[0] - p[0]) * delta_y );
    tf = tf / sqrt(delta_x * delta_x + delta_y * delta_y);
    return tf;
    }
float TriHeight2D(point P0, point P1, point P2)
    {
    float p01 = Dist2D(P0, P1);
    float p02 = Dist2D(P0, P2);
    float p12 = Dist2D(P1, P2);

    float s = (p01 + p02 + p12) / 2.0;
    float area_double = sqrt( s * (s - p01) * (s - p02) * (s - p12) ) * 2;
    return area_double / p12;
    }
int InsideConvexPoly2D(point p, point polygon[])
    {
    point poly_vect, point_vect;
    int s = 2, ts;
    for(int i = 0; i < arraylength(polygon) - 1; i++)
    {
        poly_vect = polygon[i + 1] - polygon[i];
        point_vect = p - polygon[i];

        ts = (int)sign(poly_vect[0] * point_vect[1] - poly_vect[1] * point_vect[0]);
        if (s != 2 && s != ts)
            return 0;
        s = ts;
    }
    poly_vect = polygon[0] - polygon[arraylength(polygon) - 1];
    point_vect = p - polygon[arraylength(polygon) - 1];

    ts = (int)sign(poly_vect[0] * point_vect[1] - poly_vect[1] * point_vect[0]);
    if (s != ts)
        return 0;
    return 1;
    }

//rsn = row shift noise
//for uv image mapping
float DgridPixelate2D(point pos, float block_size, float bn_scale, float bn_threshold, int bn_type, float rsn_scale, float rsn_magnitude)
    {
    float n;
    float tf = block_size / 2;
    float yval = floor(pos[1] / block_size) * block_size + tf;
    point pos_shifted = point(pos[0] + noise("simplex", yval * rsn_scale) * rsn_magnitude, pos[1], 0.0);

    point block_center = point(floor( pos_shifted[0] / block_size) * block_size + tf, yval , 0.0);

    if(bn_type == 0)
    {
        n = noise("usimplex", block_center * bn_scale);
    }
    else if(bn_type == 1)
    {
        n = noise("cell", block_center * bn_scale);
    }
    else if(bn_type == 2)
    {
        n = noise("hash", block_center * bn_scale);
    }

    if(n > bn_threshold)
    {
        float x = pos_shifted[0] - block_center[0];
        float y = pos_shifted[1] - block_center[1];
        return -sqrt( x * x + y * y );
    }
    return 0;
    }
//

//rotation
point Rot2D(point pos, point around, float theta)
    {
    return point2(  cos(theta) * (pos[X] - around[X]) - sin(theta) * (pos[Y] - around[Y]) + around[X],
                    sin(theta) * (pos[X] - around[X]) + cos(theta) * (pos[Y] - around[Y]) + around[Y]);
    }
point RotOrigin2D(point pos, float theta)
    {
    return point(  cos(theta) * (pos[X]) - sin(theta) * (pos[Y]),
                    sin(theta) * (pos[X]) + cos(theta) * (pos[Y]), 
                    0.0);
    }
//

point SpaceDistort(point uv, float scale, float move_scale, float move_mag, float rotate_ns, float rotate_nm, float rotate_bs, float threshold) //block distort threshold
    {
    point distorted = point2(uv[X] * scale, uv[Y] * scale);
    distorted += noise("simplex", distorted[X] * move_scale, distorted[Y] * move_scale) * move_mag;
    distorted[Z] = 0.0;

    float n = noise("simplex", distorted[X] * rotate_ns, distorted[Y] * rotate_ns);

    //rotate in chunks
    point distorted_scaled = point2(distorted[X] / rotate_bs, distorted[Y] / rotate_bs);
    if(noise("hash", floor(distorted_scaled[X]), floor(distorted_scaled[Y])) < threshold)
    {
        point fr = point2(fract(distorted_scaled[X]) - 0.5, fract(distorted_scaled[Y]) - 0.5);

        float r = length(fr);
        float taper = max(0.0, 0.5 - r);
        float angle = atan2(fr[Y], fr[X]) + taper * n * M_PI * rotate_nm;
        fr[X] = cos(angle) * r + 0.5;
        fr[Y] = sin(angle) * r + 0.5;

        distorted[X] = (floor(distorted_scaled[X]) + fr[X]) * rotate_bs;
        distorted[Y] = (floor(distorted_scaled[Y]) + fr[Y]) * rotate_bs;
    }
    return distorted;
    }
float DistLine2D(point p, point p0, point p1)
    {
    vector line_dir = p0 - p1;
    return abs( dot(p0 - p, normalize(vector(line_dir[1], -line_dir[0], 0.0))) );
    }
float DistLineSegment2D(point p, point p0, point p1)
    {
    vector dir_p = p - p0;
    vector dir = p1 - p0;
    float t = clamp(dot(dir_p, dir) / dot(dir, dir), 0.0, 1.0);
    return length(dir_p - dir * t);
    }
float sdTriangle( point p, point p0, point p1, point p2 )
    {
    point e0 = p1 - p0;
    point e1 = p2 - p1;
    point e2 = p0 - p2;

    point v0 = p - p0;
    point v1 = p - p1;
    point v2 = p - p2;

    point pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );
    point pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );
    point pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );
    
    float s = e0[0]*e2[1] - e0[1]*e2[0];
    point d = min( min( point( dot( pq0, pq0 ), s*(v0[0]*e0[1]-v0[1]*e0[0]), 0.0 ),
                    point( dot( pq1, pq1 ), s*(v1[0]*e1[1]-v1[1]*e1[0]), 0.0 )),
                    point( dot( pq2, pq2 ), s*(v2[0]*e2[1]-v2[1]*e2[0]), 0.0 ));

    return -sqrt(d[0])*sign(d[1]);
    }
float dTriangle( point p, point p0, point p1, point p2 )
    {
    point e0 = p1 - p0;
    point e1 = p2 - p1;
    point e2 = p0 - p2;

    point v0 = p - p0;
    point v1 = p - p1;
    point v2 = p - p2;

    point pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );
    point pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );
    point pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );
    
    float s = e0[0]*e2[1] - e0[1]*e2[0];
    point d = min( min( point( dot( pq0, pq0 ), s*(v0[0]*e0[1]-v0[1]*e0[0]), 0.0 ),
                    point( dot( pq1, pq1 ), s*(v1[0]*e1[1]-v1[1]*e1[0]), 0.0 )),
                    point( dot( pq2, pq2 ), s*(v2[0]*e2[1]-v2[1]*e2[0]), 0.0 ));

    return sqrt(d[0]);
    }
